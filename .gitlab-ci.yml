# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/ee/user/application_security/secret_detection/#customizing-settings
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
stages:
  - build
  - test
  - deploy

build:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - docker compose build --pull -t "$CI_REGISTRY_IMAGE${tag}" .
    - docker compose push "$CI_REGISTRY_IMAGE${tag}"
  rules:
    - if: $CI_COMMIT_BRANCH
      exists:
        - Dockerfile

test:
  stage: test
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - |
      if [[ "$CI_COMMIT_BRANCH" == "$CI_DEFAULT_BRANCH" ]]; then
        tag=""
        echo "Running on default branch '$CI_DEFAULT_BRANCH': tag = 'latest'"
      else
        tag=":$CI_COMMIT_REF_SLUG"
        echo "Running on branch '$CI_COMMIT_BRANCH': tag = $tag"
      fi
    - docker compose up --pull -t "$CI_REGISTRY_IMAGE${tag}" .
    - docker run $CI_REGISTRY_IMAGE npm run test

  deploy-staging:
    stage: deploy
    image: docker:latest
    services:
      - docker:dind
    before_script:
      - aws ecr get-login-password | docker login --username AWS --password-stdin $AWS_ECR_ENDPOINT
    script:
      - docker push $AWS_ECR_ENDPOINT/$APP_NAME:$CI_PIPELINE_IID
  
  deploy-production:
    stage: deploy
    image: docker:latest
    services:
      - docker:dind
    before_script:
      - aws ecr get-login-password | docker login --username AWS --password-stdin $AWS_ECR_ENDPOINT
    script:
      - docker push $AWS_ECR_ENDPOINT/$APP_NAME:$CI_PIPELINE_IID
    when: manual

sast:
  stage: test
include:
- template: Security/SAST.gitlab-ci.yml
